plugins {
    id "org.sonarqube" version "2.6"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

apply plugin: 'application'

mainClassName = 'org.tron.stress.Stress'

task version(type: Exec) {
    commandLine 'bash', '-c', '../ver.sh'
}

dependencies {
    //local libraries
    compile fileTree(dir: 'libs', include: '*.jar')
    // end local libraries
//    testCompile group: 'junit', name: 'junit', version: '4.12'
//    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '1.0.0.1'

//    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'

    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.69'

    compile group: 'com.typesafe', name: 'config', version: '1.3.2'

    compile "com.cedarsoftware:java-util:1.8.0"

    compile group: 'com.beust', name: 'jcommander', version: '1.72'

//    compile group: 'junit', name: 'junit', version: '4.12'

//    compile group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.10.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'

    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.2'
    compile group: 'com.github.davidb', name: 'metrics-influxdb', version: '0.8.2'

    compile group: 'com.carrotsearch', name: 'java-sizeof', version: '0.0.5'

    compile 'com.googlecode.cqengine:cqengine:2.12.4'
    compile group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'

    // http
//    compile 'org.eclipse.jetty:jetty-server:9.4.11.v20180605'
//    compile 'org.eclipse.jetty:jetty-servlet:9.4.11.v20180605'
    compile 'com.alibaba:fastjson:1.2.83'
//    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.1'
    // end http

    // https://mvnrepository.com/artifact/com.github.briandilley.jsonrpc4j/jsonrpc4j
//    compile group: 'com.github.briandilley.jsonrpc4j', name: 'jsonrpc4j', version: '1.6'

    // https://mvnrepository.com/artifact/javax.portlet/portlet-api
    compileOnly group: 'javax.portlet', name: 'portlet-api', version: '3.0.1'

    compile "io.vavr:vavr:0.9.2"
    compile group: 'org.pf4j', name: 'pf4j', version: '2.5.0'

//    compile group: 'org.zeromq', name: 'jeromq', version: '0.5.0'
//    compile 'com.github.tronprotocol:zksnark-java-sdk:master-SNAPSHOT'
    compile 'com.github.tronprotocol:java-tron:GreatVoyage-v4.5.2'
    compile project(":protocol")
}

if (project.hasProperty("mainClass")) {
    mainClassName = mainClass
}

def binaryRelease(taskName, jarName, mainClass) {
    return tasks.create("${taskName}", Jar) {
        baseName = jarName
        version = null
        from(sourceSets.main.output) {
            include "/**"
        }

        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        // exclude these files for bouncycastle
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"

        manifest {
            attributes "Main-Class": "${mainClass}"
        }

//        classifier(jarName)
    }
}

def createScript(project, mainClass, name) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        unixStartScriptGenerator.template = resources.text.fromFile('../gradle/unixStartScript.txt')
        windowsStartScriptGenerator.template = resources.text.fromFile('../gradle/windowsStartScript.txt')
        outputDir = new File(project.buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
//        defaultJvmOpts = ['-XX:+UseConcMarkSweepGC',
//                          '-XX:+PrintGCDetails',
//                          '-Xloggc:./gc.log',
//                          '-XX:+PrintGCDateStamps',
//                          '-XX:+CMSParallelRemarkEnabled',
//                          '-XX:ReservedCodeCacheSize=256m',
//                          '-XX:+CMSScavengeBeforeRemark'
//        ]
    }
    project.tasks[name].dependsOn(project.jar)
    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}

applicationDistribution.from("../gradle/java-tron.vmoptions") {
    into "bin"
}

configurations.archives.artifacts.removeAll { it.type == 'tar' }
applicationName = 'java-tron'
startScripts.enabled = false
run.enabled = false
tasks.distTar.enabled = false

createScript(project, 'org.tron.stress.Stress', 'java-tron-tool')
//createScript(project, 'org.tron.program.KeystoreFactory', 'KeystoreFactory')
//createScript(project, 'org.tron.program.DBConvert', 'DBConvert')
//createScript(project, 'org.tron.tool.litefullnode.LiteFullNodeTool', 'LiteFullNodeTool')
//createScript(project, 'org.tron.program.SendTx', 'SendTx')

def releaseBinary = hasProperty('binaryRelease') ? getProperty('binaryRelease') : 'true'
if (releaseBinary == 'true') {
    artifacts {
        archives(binaryRelease('buildSolidityNodeJar', 'SolidityNode', 'org.tron.program.SolidityNode'),
                binaryRelease('buildJavaTronTool', 'Stress', 'org.tron.stress.Stress')
        )
    }
}

task copyToParent(type: Copy) {
    into "../build/distributions"
    from "$buildDir/distributions"
    include "*.zip"
}

build.finalizedBy(copyToParent)
